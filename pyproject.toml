[build-system]
requires = [
    "setuptools>=45",
    "setuptools_scm[toml]>=6.2",
    "wheel",
    "ninja",
    "cmake>=3.24",
    "pybind11-stubgen",
]
build-backend = "setuptools.build_meta"

[project]
name = "quine_mccluskey_tomas789"
description = "An implementation of the Quine-McCluskey algorithm"
requires-python = ">=3.7"
keywords = ["Quine McCluskey", "XOR"]
license = {text = "BSD"}
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Utilities",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware",
    "Typing :: Typed",
]
dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest>=6.0", "flake8", "black", "pylint"]

[project.urls]
"Homepage" = "https://github.com/tomas789/quine-mccluskey-tomas789"

[tool.setuptools_scm]
write_to = "quine_mccluskey_tomas789/_version.py"

[tool.pylint]
max-line-length = 127
ignore = "_version.py"
disable = [
    "invalid-name", 
    "too-many-nested-blocks", 
    "too-many-locals", 
    "dangerous-default-value",
    "too-many-branches", 
    "too-many-statements",
    "too-few-public-methods"
]

[tool.distutils.bdist_wheel]
universal = true

[tool.pyright]

[tool.flake8]
max-line-length = 127

[tool.black]
line-length = 127
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']

[tool.isort]
profile = "black"

[tool.cibuildwheel]
# test-command = "cd {project}/tests && pytest ."
# test-extras = ["test"]
# test-skip = ["*universal2:arm64"]
# Setuptools bug causes collision between pypy and cpython artifacts
build-verbosity = 3


build = "cp3*"


[tool.cibuildwheel.linux]
archs = ["auto", "aarch64"]
before-build = "rm -rf {project}/build"

[tool.cibuildwheel.macos]
before-build = "rm -rf {project}/build"

# Use delvewheel on windows
[tool.cibuildwheel.windows]
before-build = [
    "pip install delvewheel",
    "if exist build rmdir /s /q build",
]
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
